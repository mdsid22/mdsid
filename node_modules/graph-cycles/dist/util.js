"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortFastAnalysisResult = exports.sortFullAnalysisResult = exports.rotateArray = exports.arrayCompare = exports.uniqArrays = exports.uniq = void 0;
const fast_string_compare_1 = require("fast-string-compare");
function uniq(arr) {
    return [...new Set(arr)];
}
exports.uniq = uniq;
function uniqArrays(arrays) {
    const known = [];
    return arrays
        .filter(array => {
        const isKnown = known.some(arr => !arrayCompare(arr, array));
        if (isKnown)
            return false;
        known.push(array);
        return true;
    });
}
exports.uniqArrays = uniqArrays;
function arrayCompare(a, b) {
    if (a.length !== b.length)
        return a.length > b.length ? 1 : -1;
    else if (a.length === 0)
        return 0;
    for (let i = 0; i < a.length; ++i) {
        const diff = fast_string_compare_1.compare(a[i], b[i]);
        if (diff !== 0)
            return diff;
    }
    return 0;
}
exports.arrayCompare = arrayCompare;
function sortArrays(arr) {
    return [...arr].sort((a, b) => {
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return fast_string_compare_1.compare(JSON.stringify(a), JSON.stringify(b));
    });
}
function rotateArray(arr, offset) {
    return [...arr.slice(offset), ...arr.slice(0, offset)];
}
exports.rotateArray = rotateArray;
function rotationSort(arr) {
    const anchor = [...arr].sort(fast_string_compare_1.compare)[0];
    while (arr[0] !== anchor)
        arr = rotateArray(arr, 1);
    return [...arr];
}
function rotationSortArrays(arrays) {
    return arrays.map(arr => rotationSort(arr));
}
function sortFullAnalysisResult(result) {
    return {
        cycles: sortArrays(rotationSortArrays(result.cycles)),
        entrypoints: sortArrays(result.entrypoints),
        dependencies: [...result.dependencies].sort(fast_string_compare_1.compare),
        dependents: [...result.dependents].sort(fast_string_compare_1.compare),
        all: [...result.all].sort(fast_string_compare_1.compare),
    };
}
exports.sortFullAnalysisResult = sortFullAnalysisResult;
function sortFastAnalysisResult(result) {
    return {
        cyclic: [...result.cyclic].sort(fast_string_compare_1.compare),
        dependencies: [...result.dependencies].sort(fast_string_compare_1.compare),
        dependents: [...result.dependents].sort(fast_string_compare_1.compare),
    };
}
exports.sortFastAnalysisResult = sortFastAnalysisResult;
