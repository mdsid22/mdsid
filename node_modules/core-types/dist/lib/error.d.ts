import { Location, NodePath, NodeType } from "./types";
export interface CoreTypesErrorMeta {
    blob?: any;
    path?: NodePath;
    loc?: Location;
    source?: string;
    filename?: string;
    relatedError?: Error;
}
export declare class CoreTypesError extends Error implements CoreTypesErrorMeta {
    blob?: any;
    path?: NodePath;
    loc?: Location;
    source?: string;
    filename?: string;
    relatedError?: Error;
    constructor(message: string, meta?: CoreTypesErrorMeta);
}
export declare class MalformedTypeError extends CoreTypesError {
    constructor(message: string, meta?: CoreTypesErrorMeta);
}
export declare class MissingReferenceError extends CoreTypesError {
    constructor(ref: string, meta?: CoreTypesErrorMeta);
}
export declare class UnsupportedError extends CoreTypesError {
    constructor(message: string, meta?: CoreTypesErrorMeta);
}
export declare class RelatedError extends CoreTypesError {
    constructor(err: Error, meta?: CoreTypesErrorMeta);
}
export declare function throwUnsupportedError(msg: string, node: NodeType, path?: NodePath): never;
export declare function throwRelatedError(err: Error, meta?: Omit<CoreTypesErrorMeta, 'relatedError'>): never;
export declare function isCoreTypesError(err: unknown | Error | CoreTypesError): err is CoreTypesError;
export declare function decorateErrorMeta(target: CoreTypesErrorMeta, source: Partial<CoreTypesErrorMeta>): CoreTypesErrorMeta;
export declare function decorateError<T extends Error>(err: T, meta: Partial<CoreTypesErrorMeta>): T;
export declare type WarnFunction = (msg: string, meta?: CoreTypesErrorMeta) => void;
