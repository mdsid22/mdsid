"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decorateError = exports.decorateErrorMeta = exports.isCoreTypesError = exports.throwRelatedError = exports.throwUnsupportedError = exports.RelatedError = exports.UnsupportedError = exports.MissingReferenceError = exports.MalformedTypeError = exports.CoreTypesError = void 0;
class CoreTypesError extends Error {
    constructor(message, meta = {}) {
        super(message);
        Object.setPrototypeOf(this, CoreTypesError.prototype);
        this.blob = meta.blob;
        this.path = meta.path;
        this.loc = meta.loc;
        this.source = meta.source;
        this.filename = meta.filename;
        this.relatedError = meta.relatedError;
    }
}
exports.CoreTypesError = CoreTypesError;
class MalformedTypeError extends CoreTypesError {
    constructor(message, meta = {}) {
        super(message, meta);
        Object.setPrototypeOf(this, MalformedTypeError.prototype);
    }
}
exports.MalformedTypeError = MalformedTypeError;
class MissingReferenceError extends CoreTypesError {
    constructor(ref, meta = {}) {
        super(`Reference to missing type "${ref}"`, meta);
        Object.setPrototypeOf(this, MissingReferenceError.prototype);
    }
}
exports.MissingReferenceError = MissingReferenceError;
class UnsupportedError extends CoreTypesError {
    constructor(message, meta = {}) {
        super(message, meta);
        Object.setPrototypeOf(this, UnsupportedError.prototype);
    }
}
exports.UnsupportedError = UnsupportedError;
class RelatedError extends CoreTypesError {
    constructor(err, meta = {}) {
        super(err.message, { ...meta, relatedError: err });
        Object.setPrototypeOf(this, RelatedError.prototype);
    }
}
exports.RelatedError = RelatedError;
function throwUnsupportedError(msg, node, path) {
    throw new UnsupportedError(msg, {
        blob: node,
        ...(node.loc ? { loc: node.loc } : {}),
        ...(path ? { path } : {}),
    });
}
exports.throwUnsupportedError = throwUnsupportedError;
function throwRelatedError(err, meta) {
    throw new RelatedError(err, meta);
}
exports.throwRelatedError = throwRelatedError;
function isCoreTypesError(err) {
    return err instanceof CoreTypesError;
}
exports.isCoreTypesError = isCoreTypesError;
function decorateErrorMeta(target, source) {
    var _a, _b, _c, _d, _e;
    if (source.blob)
        (_a = target.blob) !== null && _a !== void 0 ? _a : (target.blob = source.blob);
    if (source.path)
        (_b = target.path) !== null && _b !== void 0 ? _b : (target.path = source.path);
    if (source.loc)
        (_c = target.loc) !== null && _c !== void 0 ? _c : (target.loc = source.loc);
    if (source.source)
        (_d = target.source) !== null && _d !== void 0 ? _d : (target.source = source.source);
    if (source.filename)
        (_e = target.filename) !== null && _e !== void 0 ? _e : (target.filename = source.filename);
    return target;
}
exports.decorateErrorMeta = decorateErrorMeta;
function decorateError(err, meta) {
    if (isCoreTypesError(err))
        decorateErrorMeta(err, meta);
    return err;
}
exports.decorateError = decorateError;
