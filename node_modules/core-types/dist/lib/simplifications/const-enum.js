"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineConstAndEnum = exports.mergeConstEnumUnion = exports.simplifyEnumAndConst = void 0;
const util_1 = require("../util");
function simplifyEnumAndConst(node) {
    const { const: _const, enum: _enum, ...rest } = node;
    const combined = combineConstAndEnum(node);
    if (combined.length === 0)
        return rest;
    else if (combined.length === 1)
        return { ...rest, const: combined[0] };
    else {
        if (node.type === 'boolean'
            &&
                combined.includes(false)
            &&
                combined.includes(true))
            // This enum can be removed in favor of generic boolean
            return { ...rest };
        else
            return { ...rest, enum: combined };
    }
}
exports.simplifyEnumAndConst = simplifyEnumAndConst;
function mergeConstEnumUnion(nodes) {
    const arrays = nodes.map(node => combineConstAndEnum(node));
    if (arrays.some(arr => arr.length === 0))
        // One of the nodes doesn't have const or enum, so all other const and
        // enums are irrelevant in a union.
        return [];
    return (0, util_1.uniq)([].concat(...arrays));
}
exports.mergeConstEnumUnion = mergeConstEnumUnion;
// TODO: This shouldn't union but _intersect_ enum and const
function combineConstAndEnum(pseudoNode) {
    return (0, util_1.uniq)([
        ...(pseudoNode.const != null ? [pseudoNode.const] : []),
        ...(pseudoNode.enum != null ? pseudoNode.enum : []),
    ]);
}
exports.combineConstAndEnum = combineConstAndEnum;
