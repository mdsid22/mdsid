"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertCoreTypesToGraphql = exports.convertCoreTypesToGraphqlAst = void 0;
const core_types_1 = require("core-types");
const graphql_1 = require("graphql");
const gql_utils_1 = require("./gql-utils");
const annotation_1 = require("./annotation");
function defaultNameGenerator(baseName, nameHint, test) {
    let name = `${baseName}_${nameHint}`;
    let i = 1;
    while (!test(name))
        name = `${baseName}_${nameHint}_${++i}`;
    return name;
}
function makePackageLine(userPackage, userPackageUrl) {
    return !userPackage && !userPackageUrl
        ? ''
        : userPackage && userPackageUrl
            ? `${userPackage} (${userPackageUrl})`
            : userPackage
                ? `${userPackage}`
                : `${userPackageUrl}`;
}
function makeHeader(filename, sourceFilename, userPackage, userPackageUrl) {
    const outfile = filename ? `The file ${filename}` : 'This file';
    const infile = sourceFilename ? ` from ${sourceFilename}` : '';
    const thisPackage = makePackageLine('core-types-graphql', 'https://github.com/grantila/core-types-graphql');
    const thatPackage = makePackageLine(userPackage, userPackageUrl);
    return [
        `${outfile} was auto-generated${infile} using`,
        thisPackage,
        ...(!thatPackage ? [] : ["on behalf of", thatPackage]),
    ]
        .map(line => `# ${line}`)
        .join("\n");
}
function convertCoreTypesToGraphqlAst(doc, options = {}) {
    if (doc.version !== 1)
        throw new core_types_1.UnsupportedError(`core-types version ${doc.version} is not supported`);
    const { types } = doc;
    const { warn = (message) => console.warn(message), nullTypeName = null, nameGenerator = defaultNameGenerator, unsupported = 'warn', includeComment = false, } = options;
    const ctx = {
        options: {
            warn,
            nullTypeName,
            nameGenerator,
            unsupported,
            includeComment,
        },
        nameMap: new Map(types.map(node => [node.name, { node }])),
        nameGenerator: (baseName, nameHint) => ctx.options.nameGenerator(baseName, nameHint, name => !ctx.nameMap.has(name)),
    };
    const convertedTypes = [];
    const notConvertedTypes = [];
    const definitions = types
        .map((node, index) => {
        const convert = () => {
            if (node.type === 'boolean'
                ||
                    node.type === 'number'
                ||
                    node.type === 'integer'
                ||
                    node.type === 'string')
                return makeUnionType({
                    name: node.name,
                    ...(0, core_types_1.extractAnnotations)(node),
                    type: 'or',
                    or: [node],
                }, ctx);
            else if (node.type === 'null') {
                if (nullTypeName)
                    return gqlUnionTypeOfTypes(node, [(0, gql_utils_1.gqlNamedTypeNode)(nullTypeName)], ctx);
                return handleUnsupported(ctx, node, [index]);
            }
            else if (node.type === 'or') {
                return makeUnionType(node, ctx);
            }
            else if (node.type === 'object')
                return makeObjectType(node, ctx);
            else
                return handleUnsupported(ctx, node, [index]);
        };
        const gqlNode = convert();
        (gqlNode ? convertedTypes : notConvertedTypes).push(node.name);
        return gqlNode;
    })
        .filter(core_types_1.isNonNullable);
    return {
        data: {
            definitions,
            kind: 'Document',
        },
        convertedTypes,
        notConvertedTypes,
    };
}
exports.convertCoreTypesToGraphqlAst = convertCoreTypesToGraphqlAst;
function handleUnsupported(ctx, node, path) {
    if (ctx.options.unsupported === 'ignore')
        return;
    const message = `Type '${node.type}' not supported`;
    try {
        (0, core_types_1.throwUnsupportedError)(message, node, path);
    }
    catch (err) {
        if (ctx.options.unsupported === 'error')
            throw err;
        ctx.options.warn(message, err);
    }
}
function convertCoreTypesToGraphql(doc, options = {}) {
    var _a;
    const { data: ast, convertedTypes, notConvertedTypes, } = convertCoreTypesToGraphqlAst(doc, options);
    const header = ((_a = options.includeComment) !== null && _a !== void 0 ? _a : true)
        ? makeHeader(options.filename, options.sourceFilename, options.userPackage, options.userPackageUrl)
        : undefined;
    return {
        data: (header ? `${header}\n\n` : '') + (0, graphql_1.print)(ast),
        convertedTypes,
        notConvertedTypes,
    };
}
exports.convertCoreTypesToGraphql = convertCoreTypesToGraphql;
function gqlUnionTypeOfTypes(node, types, ctx) {
    return (0, gql_utils_1.gqlUnionType)({ ...makeCommonTypeProperties(node, ctx), types });
}
function makeUnionType(node, ctx) {
    const types = node.or
        .map((or, index) => nodeToNamedType(or, node.name, `T${index}`, ctx))
        .filter(core_types_1.isNonNullable);
    if (types.length === 0)
        return undefined;
    return gqlUnionTypeOfTypes(node, types, ctx);
}
function makeCommonTypeProperties(node, ctx) {
    return {
        name: (0, gql_utils_1.gqlNameNode)(node.name),
        ...makeCommonTypePropertiesWithoutName(node, ctx),
    };
}
function makeCommonTypePropertiesWithoutName(node, ctx) {
    const description = annotationToComment(node, ctx);
    return {
        ...(description ? { description } : {})
    };
}
function makeObjectType(node, ctx) {
    return {
        ...makeCommonTypeProperties(node, ctx),
        kind: 'ObjectTypeDefinition',
        fields: Object.entries(node.properties)
            .map(([name, { node: child, required }]) => {
            const typeNode = nodeToNamedTypeOrList(child, node.name, name, ctx);
            if (typeNode === undefined)
                return undefined;
            return {
                kind: 'FieldDefinition',
                ...makeCommonTypePropertiesWithoutName(child, ctx),
                name: (0, gql_utils_1.gqlNameNode)(name),
                type: (0, gql_utils_1.gqlMaybeRequiredNode)(typeNode, required),
            };
        })
            .filter(core_types_1.isNonNullable),
    };
}
function ensureArrayType(node) {
    return node.type === 'array'
        ? node
        : {
            ...node,
            type: 'array',
            elementType: { type: 'or', or: node.elementTypes },
        };
}
function nodeToNamedTypeOrList(node, baseName, nameHint, ctx) {
    if (node.type === 'array' || node.type === 'tuple') {
        const namedType = nodeToNamedTypeOrList(ensureArrayType(node).elementType, baseName, nameHint, ctx);
        if (namedType === undefined)
            return namedType;
        return (0, gql_utils_1.gqlListTypeNode)((0, gql_utils_1.gqlMaybeRequiredNode)(namedType, true));
    }
    else
        return nodeToNamedType(node, baseName, nameHint, ctx);
}
function nodeToNamedType(node, baseName, nameHint, ctx) {
    const typeName = node.type === 'boolean'
        ? 'Boolean'
        : node.type === 'integer'
            ? 'Int'
            : node.type === 'number'
                ? 'Float'
                : node.type === 'string'
                    ? 'String'
                    : node.type === 'ref'
                        ? node.ref
                        : makeNamedType(node, baseName, nameHint, ctx);
    return typeName === undefined ? typeName : (0, gql_utils_1.gqlNamedTypeNode)(typeName);
}
function makeNamedType(node, baseName, nameHint, ctx) {
    if (node.type !== 'object')
        return handleUnsupported(ctx, node);
    const name = ctx.nameGenerator(baseName, nameHint);
    const gqlType = makeObjectType({ ...node, name }, ctx);
    ctx.nameMap.set(name, { node, gqlType });
    return name;
}
function annotationToComment(node, ctx) {
    const comment = (0, annotation_1.stringifyAnnotations)(node, ctx);
    if (!comment)
        return undefined;
    return {
        kind: 'StringValue',
        value: comment,
        block: comment.includes("\n"),
    };
}
