import type { NodeDocument, WarnFunction, ConversionResult } from "core-types";
import type { SyncOrAsync, TypeImplementation } from "./types";
import type { Reader } from "./reader";
export interface WriterOptions {
    warn: WarnFunction;
    sourceFilename?: string;
    filename?: string;
    rawInput?: string;
}
export declare type WriterFunction = (doc: NodeDocument, opts: WriterOptions) => SyncOrAsync<ConversionResult<string>>;
export declare type Shortcut = (data: string, writeOpts: WriterOptions, reader: Reader) => SyncOrAsync<ConversionResult<string>>;
export interface Writer {
    kind: TypeImplementation;
    write: WriterFunction;
    shortcut?: Partial<Record<TypeImplementation, Shortcut>>;
}
