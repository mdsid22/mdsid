"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const format_graph_1 = require("./format-graph");
function fakeReader(kind, formats = [], managedRead = false) {
    return {
        kind,
        read: null,
        managedRead,
        shortcut: Object.fromEntries(formats.map(format => [format, null])),
    };
}
function fakeWriter(kind, formats = []) {
    return {
        kind,
        write: null,
        shortcut: Object.fromEntries(formats.map(format => [format, null])),
    };
}
describe("format-graph", () => {
    const gqlRead = fakeReader('gql', ['jsc']);
    const jscRead = fakeReader('jsc', ['jsc', 'oapi']);
    const oapiRead = fakeReader('oapi', ['jsc', 'oapi']);
    const tsRead = fakeReader('ts');
    const stRead = fakeReader('st', ['jsc'], true);
    const gqlWrite = fakeWriter('gql');
    const tsWrite = fakeWriter('ts');
    const jscWrite = fakeWriter('jsc', ['jsc']);
    const oapiWrite = fakeWriter('oapi', ['jsc']);
    const stWrite = fakeWriter('st', ['jsc']);
    const makeGraph = () => {
        const graph = new format_graph_1.FormatGraph();
        graph.registerReader(gqlRead);
        graph.registerReader(jscRead);
        graph.registerReader(oapiRead);
        graph.registerReader(tsRead);
        graph.registerReader(stRead);
        graph.registerWriter(gqlWrite);
        graph.registerWriter(tsWrite);
        graph.registerWriter(jscWrite);
        graph.registerWriter(oapiWrite);
        graph.registerWriter(stWrite);
        return graph;
    };
    it("findAllPaths (incl core-types)", () => {
        const graph = makeGraph();
        const paths = graph.findAllPaths(tsRead, gqlWrite, undefined);
        expect(paths.map(path => (0, format_graph_1.makePathKey)(path))).toMatchSnapshot();
    });
    it("findAllPaths (only shortcuts when none exist)", () => {
        const graph = makeGraph();
        const paths = graph.findAllPaths(tsRead, gqlWrite, true);
        expect(paths.map(path => (0, format_graph_1.makePathKey)(path))).toMatchSnapshot();
    });
    it("findAllPaths (only shortcuts when exist)", () => {
        const graph = makeGraph();
        const paths = graph.findAllPaths(stRead, oapiWrite, true);
        expect(paths.map(path => (0, format_graph_1.makePathKey)(path))).toMatchSnapshot();
    });
    it("findAllPaths (no shortcuts)", () => {
        const graph = makeGraph();
        const paths = graph.findAllPaths(stRead, oapiWrite, false);
        expect(paths.map(path => (0, format_graph_1.makePathKey)(path))).toMatchSnapshot();
    });
});
