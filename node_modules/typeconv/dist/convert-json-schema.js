"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOpenApiWriter = exports.getOpenApiReader = exports.getJsonSchemaWriter = exports.getJsonSchemaReader = void 0;
const core_types_json_schema_1 = require("core-types-json-schema");
const js_yaml_1 = require("js-yaml");
const path = require("path");
const utils_1 = require("./utils");
const package_1 = require("./package");
const format_graph_1 = require("./format-graph");
function maybeYamlReader(data, { warn, filename }) {
    var _a;
    const file = (_a = filename === null || filename === void 0 ? void 0 : filename.toLowerCase()) !== null && _a !== void 0 ? _a : '';
    const isYaml = file.endsWith('yml') || file.endsWith('yaml');
    const input = isYaml
        ? (0, js_yaml_1.load)(data, {
            filename,
            onWarning({ message, stack }) {
                warn(message, { blob: { stack } });
            },
        })
        // TODO: Maybe test if JSON parsing fails, and fallback to yaml,
        //       despite no filename match
        : data;
    return input;
}
function getJsonSchemaReader() {
    return {
        kind: 'jsc',
        read(schema) {
            return (0, core_types_json_schema_1.convertJsonSchemaToCoreTypes)(schema);
        },
    };
}
exports.getJsonSchemaReader = getJsonSchemaReader;
function getJsonSchemaWriter() {
    return {
        kind: 'jsc',
        write(doc, { filename, sourceFilename }) {
            const { data: schemaObject, ...info } = (0, core_types_json_schema_1.convertCoreTypesToJsonSchema)(doc, { filename, sourceFilename, userPackage: package_1.userPackage, userPackageUrl: package_1.userPackageUrl });
            return {
                data: (0, utils_1.stringify)(schemaObject),
                ...info,
            };
        },
        shortcut: {
            oapi(schema, readerOptions) {
                var _a;
                const openApiSchema = maybeYamlReader(schema, readerOptions);
                const jsonSchema = (0, core_types_json_schema_1.openApiToJsonSchema)(openApiSchema);
                return {
                    data: (0, utils_1.stringify)(jsonSchema),
                    convertedTypes: Object.keys((_a = jsonSchema.definitions) !== null && _a !== void 0 ? _a : {}),
                    notConvertedTypes: [],
                };
            }
        },
    };
}
exports.getJsonSchemaWriter = getJsonSchemaWriter;
function getOpenApiReader() {
    return {
        kind: 'oapi',
        read(schema, readerOptions) {
            const openApiSchema = maybeYamlReader(schema, readerOptions);
            return (0, core_types_json_schema_1.convertOpenApiToCoreTypes)(openApiSchema);
        },
    };
}
exports.getOpenApiReader = getOpenApiReader;
function getOpenApiWriter({ format, ...openApiOptions }) {
    const formatOutput = (data) => (format === 'yaml' || format === 'yml')
        ? (0, js_yaml_1.dump)(data)
        : (0, utils_1.stringify)(data);
    const getOpenApiOptions = (filename) => {
        var _a, _b;
        return ({
            ...openApiOptions,
            title: (_a = openApiOptions.title) !== null && _a !== void 0 ? _a : (filename
                ? `Converted from ${path.basename(filename)} with typeconv`
                : 'Converted with typeconv'),
            version: (_b = openApiOptions.version) !== null && _b !== void 0 ? _b : '1',
        });
    };
    return {
        kind: 'oapi',
        write(doc, { filename, sourceFilename }) {
            const { data: schemaObject, ...info } = (0, core_types_json_schema_1.convertCoreTypesToOpenApi)(doc, {
                filename,
                sourceFilename,
                userPackage: package_1.userPackage,
                userPackageUrl: package_1.userPackageUrl,
                ...getOpenApiOptions(filename),
            });
            return {
                data: formatOutput(schemaObject),
                ...info,
            };
        },
        shortcut: {
            jsc(data, { filename }) {
                var _a;
                const jsonSchema = JSON.parse(data);
                const openApiSchemaObject = (0, core_types_json_schema_1.jsonSchemaDocumentToOpenApi)(jsonSchema, getOpenApiOptions(filename));
                return {
                    data: formatOutput(openApiSchemaObject),
                    convertedTypes: Object.keys((_a = jsonSchema.definitions) !== null && _a !== void 0 ? _a : {}),
                    notConvertedTypes: [],
                };
            }
        },
    };
}
exports.getOpenApiWriter = getOpenApiWriter;
const defaultOpenApiOptions = { format: 'json', title: '', version: '' };
(0, format_graph_1.registerReader)(getJsonSchemaReader());
(0, format_graph_1.registerWriter)(getJsonSchemaWriter());
(0, format_graph_1.registerReader)(getOpenApiReader());
(0, format_graph_1.registerWriter)(getOpenApiWriter(defaultOpenApiOptions));
