"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.annotateCoreTypes = exports.annotateJsonSchema = void 0;
const core_types_1 = require("core-types");
function annotateJsonSchema(node, jsonSchema) {
    const description = !node.description && !node.see
        ? undefined
        : mergeDescriptionAndSee(node.description, node.see);
    return {
        ...jsonSchema,
        ...(!node.title ? {} : { title: node.title }),
        ...(!description ? {} : { description }),
        ...(!node.default ? {} : { default: node.default }),
        ...(!node.examples ? {} : { examples: node.examples }),
        ...(!node.comment ? {} : { $comment: node.comment }),
    };
}
exports.annotateJsonSchema = annotateJsonSchema;
function annotateCoreTypes(node, jsonSchema) {
    var _a;
    const { description, see } = splitDescriptionAndSee((_a = jsonSchema.description) !== null && _a !== void 0 ? _a : '');
    const annotations = {
        ...(jsonSchema.title
            ? { title: jsonSchema.title }
            : {}),
        ...(jsonSchema.default
            ? { default: (0, core_types_1.stringify)(jsonSchema.default) }
            : {}),
        ...(jsonSchema.examples
            ? { examples: (0, core_types_1.stringify)(jsonSchema.examples) }
            : {}),
        ...(jsonSchema.$comment
            ? { comment: jsonSchema.$comment }
            : {}),
        ...(description ? { description } : {}),
        ...((see && see.length > 0) ? { see } : {}),
    };
    return { ...annotations, ...node };
}
exports.annotateCoreTypes = annotateCoreTypes;
function mergeDescriptionAndSee(description, see) {
    const seeAsString = () => (0, core_types_1.ensureArray)(see)
        .map(see => `@see ${see}`)
        .join("\n");
    if (description && (see === null || see === void 0 ? void 0 : see.length)) {
        return description + "\n\n" + seeAsString();
    }
    return description ? description : seeAsString();
}
function splitDescriptionAndSee(data) {
    const lines = (data !== null && data !== void 0 ? data : '').split("\n");
    const see = [];
    while (lines.length > 0
        &&
            lines[lines.length - 1].startsWith('@see '))
        see.push(lines.pop().slice(5));
    while (lines.length > 0 && !lines[lines.length - 1].trim())
        lines.pop();
    return {
        description: lines.join("\n"),
        see,
    };
}
