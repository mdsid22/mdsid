"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readExportedSchemas = void 0;
const suretype_1 = require("suretype");
const types_1 = require("./types");
function readExportedSchemas(filename, refMethod, onTopLevelNameConflict) {
    const ret = [];
    let mod;
    try {
        mod = require(filename);
    }
    catch (err) {
        return {
            ok: false,
            error: (0, types_1.serializeError)(err),
        };
    }
    if (Array.isArray(mod)) {
        ret.push(...mod.map((value) => ({ value })));
    }
    else if (mod && typeof mod === "object") {
        Object
            .keys(mod)
            .filter(key => !["default", "__esModule"].includes(key))
            .forEach(key => {
            ret.push({ name: key, value: mod[key] });
        });
        if (mod.__esModule && mod.default) {
            if (Array.isArray(mod.default))
                ret.push(...mod.default.map((value) => ({ value })));
            else if (typeof mod.default === "object")
                Object
                    .keys(mod.default)
                    .forEach(key => {
                    ret.push({ name: key, value: mod.default[key] });
                });
        }
    }
    const schemas = ret
        .map(({ value, name }) => ({ name, schema: (0, suretype_1.getValidatorSchema)(value) }))
        .map(({ name, schema }) => name && schema
        ? (0, suretype_1.ensureNamed)(name, schema)
        : schema)
        .filter((value) => !!value);
    const { schema: jsonSchema } = (0, suretype_1.extractJsonSchema)(schemas, {
        onNonSuretypeValidator: 'ignore',
        onTopLevelNameConflict,
        refMethod,
    });
    return { ok: true, jsonSchema };
}
exports.readExportedSchemas = readExportedSchemas;
