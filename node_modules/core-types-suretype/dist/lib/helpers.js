"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateValue = exports.translateObjectValue = exports.translateArrayValue = exports.translateValues = exports.createVariable = exports.createExportModifier = exports.annotationsToSuretype = exports.createChainedCall = exports.createCall = exports.t = exports.ts = exports.factory = void 0;
const ts = require("typescript");
exports.ts = ts;
const core_types_1 = require("core-types");
const { factory } = ts;
exports.factory = factory;
exports.t = {
    null: () => factory.createToken(ts.SyntaxKind.NullKeyword),
    true: () => factory.createToken(ts.SyntaxKind.TrueKeyword),
    false: () => factory.createToken(ts.SyntaxKind.FalseKeyword),
    never: () => factory.createToken(ts.SyntaxKind.NeverKeyword),
    string: factory.createStringLiteral,
    number: factory.createNumericLiteral,
    ident: factory.createIdentifier,
};
function createCall(functionName, args = [], typeArgs = undefined) {
    return factory.createCallExpression(exports.t.ident(functionName), typeArgs, args);
}
exports.createCall = createCall;
function createChainedCall(target, functionName, args = []) {
    return factory.createCallExpression(factory.createPropertyAccessExpression(target, exports.t.ident(functionName)), undefined, args);
}
exports.createChainedCall = createChainedCall;
function annotationsToSuretype(annotations, topLevelName) {
    const name = topLevelName !== null && topLevelName !== void 0 ? topLevelName : annotations.name;
    const { title, comment, default: _default, description: _description, } = annotations;
    const see = (0, core_types_1.ensureArray)(annotations.see);
    const examples = (0, core_types_1.ensureArray)(annotations.examples);
    const descriptions = [
        ...(_description ? [_description] : []),
        ...(see.length ? [(0, core_types_1.formatSee)(see)] : []),
        ...(_default ? [(0, core_types_1.formatDefault)(_default)] : []),
    ];
    const description = descriptions.length
        ? descriptions.join("\n\n")
        : undefined;
    const suretypeAnnotations = {
        ...(name ? { name } : {}),
        ...(title ? { title } : {}),
        ...(examples.length ? { examples } : {}),
        ...(description ? { description } : {}),
    };
    if (!comment && Object.keys(suretypeAnnotations).length === 0)
        return undefined;
    return translateObjectValue(suretypeAnnotations);
}
exports.annotationsToSuretype = annotationsToSuretype;
function createExportModifier() {
    return factory.createModifiersFromModifierFlags(ts.ModifierFlags.Export);
}
exports.createExportModifier = createExportModifier;
function createVariable(name, value, { export: _export = false, typeNode = undefined, } = {}) {
    return factory.createVariableStatement(_export ? createExportModifier() : undefined, // modifiers
    factory.createVariableDeclarationList([
        factory.createVariableDeclaration(name, undefined, // exclamation token
        typeNode, value)
    ], ts.NodeFlags.Const));
}
exports.createVariable = createVariable;
function translateValues(schema) {
    return schema.map(schemaElement => translateValue(schemaElement));
}
exports.translateValues = translateValues;
function translateArrayValue(schema) {
    return factory.createArrayLiteralExpression(schema.map(schemaElement => translateValue(schemaElement)));
}
exports.translateArrayValue = translateArrayValue;
function translateObjectValue(schema) {
    return factory.createObjectLiteralExpression(Object.keys(schema)
        .map(prop => factory.createPropertyAssignment(prop, translateValue(schema[prop]))), true);
}
exports.translateObjectValue = translateObjectValue;
function translateValue(schema) {
    if (schema === null)
        return exports.t.null();
    else if (schema === true)
        return exports.t.true();
    else if (schema === false)
        return exports.t.false();
    else if (typeof schema === 'string')
        return exports.t.string(schema);
    else if (typeof schema === 'number')
        return exports.t.number(schema);
    else if (typeof schema === 'object' && Array.isArray(schema))
        return translateArrayValue(schema);
    else if (typeof schema === 'object')
        return translateObjectValue(schema);
    throw new Error(`Internal error, cannot translate ${schema}`);
}
exports.translateValue = translateValue;
