import * as ts from 'typescript';
import type { JSONSchema7Array, JSONSchema7Object, JSONSchema7Type } from "json-schema";
import { CoreTypeAnnotations } from 'core-types';
declare const factory: ts.NodeFactory;
export { factory, ts };
export declare const t: {
    readonly null: () => ts.NullLiteral;
    readonly true: () => ts.TrueLiteral;
    readonly false: () => ts.FalseLiteral;
    readonly never: () => ts.KeywordTypeNode<ts.SyntaxKind.NeverKeyword>;
    readonly string: (text: string, isSingleQuote?: boolean | undefined) => ts.StringLiteral;
    readonly number: (value: string | number, numericLiteralFlags?: ts.TokenFlags | undefined) => ts.NumericLiteral;
    readonly ident: (text: string) => ts.Identifier;
};
export declare function createCall(functionName: string, args?: Array<ts.Expression>, typeArgs?: Array<ts.TypeNode> | undefined): ts.CallExpression;
export declare function createChainedCall(target: ts.Expression, functionName: string, args?: Array<ts.Expression>): ts.CallExpression;
export declare function annotationsToSuretype(annotations: CoreTypeAnnotations, topLevelName?: string): ts.Expression | undefined;
export declare function createExportModifier(): ts.Modifier[];
export interface CreateVariableOptions {
    export?: boolean;
    typeNode?: ts.TypeNode;
}
export declare function createVariable(name: string, value: ts.Expression, { export: _export, typeNode, }?: CreateVariableOptions): ts.VariableStatement;
export declare function translateValues(schema: Array<JSONSchema7Type>): Array<ts.Expression>;
export declare function translateArrayValue(schema: JSONSchema7Array): ts.Expression;
export declare function translateObjectValue(schema: JSONSchema7Object): ts.Expression;
export declare function translateValue(schema: JSONSchema7Type): ts.Expression;
