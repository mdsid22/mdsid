"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryOpenFileAsObject = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const json5_1 = __importDefault(require("json5"));
const tryOpenFileAsObject = (fileLocation, needArray = false) => {
    let res = undefined;
    const relativePath = path.join(path.resolve(process.cwd(), fileLocation || ''));
    if (fs.existsSync(fileLocation) || fs.existsSync(relativePath)) {
        const fp = fs.existsSync(fileLocation) ? fileLocation : relativePath;
        try {
            const data = json5_1.default.parse(fs.readFileSync(fp, 'utf8'));
            if (data && (Array.isArray(data) == needArray))
                res = data;
        }
        catch (error) {
            throw `Unable to parse config file as JSON. Please make sure ${fp} is a valid JSON config file`;
        }
    }
    return res;
};
exports.tryOpenFileAsObject = tryOpenFileAsObject;
