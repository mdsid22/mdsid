"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = exports.configFile = exports.envArgs = exports.helptext = exports.meowFlags = exports.cliOptionNames = exports.PrimitiveConverter = exports.optionKeysWithDefalts = exports.optionKeys = void 0;
const tools_1 = require("./../utils/tools");
const command_line_usage_1 = __importDefault(require("command-line-usage"));
const meow_1 = __importDefault(require("meow"));
const logo_1 = require("./logo");
const fs_extra_1 = require("fs-extra");
const changeCase = __importStar(require("change-case"));
const file_utils_1 = require("./file-utils");
const uuid_apikey_1 = __importDefault(require("uuid-apikey"));
const events_1 = require("../controllers/events");
const is_url_superb_1 = __importDefault(require("is-url-superb"));
const path = __importStar(require("path"));
const logging_1 = require("../logging/logging");
let checkUrl = url => typeof url === 'string' ? (0, is_url_superb_1.default)(url) : false;
const configWithCases = (0, fs_extra_1.readJsonSync)(path.join(__dirname, '../../bin/config-schema.json'));
const optionList = [{
        name: 'no-api',
        default: false,
        alias: 'n',
        type: Boolean,
        description: "Don't expose the api. This may be useful if you just want to set the webhooks."
    }, {
        name: 'bot-press-url',
        alias: 'b',
        type: String,
        typeLabel: '{blue {underline http://localhost:3000/api/v1/bots/cool-bot}}',
        description: "The Botpress URL that ends with your bot id."
    }, {
        name: 'twilio-webhook',
        alias: 't',
        type: String,
        typeLabel: '{blue {underline http://localhost:5555/incoming}}',
        description: "Send twillio payloads to this URL. EASY API will also parse and processes twillio response message payloads."
    }, {
        name: 'chatwoot-url',
        type: String,
        typeLabel: '{blue {underline http://localhost:3000/api/v1/accounts/3/inboxes/1}}',
        description: "The URL of the specific Chatwoot inbox you set up for this session"
    }, {
        name: 'chatwoot-api-access-token',
        type: String,
        typeLabel: '{blue {underline mEEwUGEEML2ZThMm252rLg1M}}',
        description: "The access token of the specific Chatwoot inbox you set up for this session"
    },
    {
        name: 'port',
        alias: 'p',
        default: 8002,
        type: Number,
        typeLabel: '{blue {underline 8080}}',
        description: "Set the port for the api. Default to 8002."
    },
    {
        name: 'api-host',
        type: String,
        typeLabel: '{yellow {underline localhost}}',
        description: "The easy API may be sitting behind a reverse proxy. In this case set --api-host in order to make sure the api docs and api explorer are working properly. You will need to include the protocol as well."
    },
    {
        name: 'host',
        alias: 'h',
        default: 'localhost',
        type: String,
        typeLabel: '{red {underline localhost}}',
        description: "Set the hostname for the api documantation and statistics. Overrides --api-host. Default: localhost."
    },
    {
        name: 'webhook',
        alias: 'w',
        type: String,
        typeLabel: '{yellow {underline https://webhook.site/....}}',
        description: "Webhook to use for the listeners."
    },
    {
        name: 'ev',
        alias: 'e',
        type: String,
        typeLabel: '{green {underline https://webhook.site/....}}',
        description: "Send launch events to this URL."
    },
    {
        name: 'ef',
        type: String,
        //@ts-ignore
        default: ["qr", "STARTUP"],
        isMultiple: true,
        typeLabel: '{blueBright {underline qr,STARTUP}}',
        description: "Filters which namespaces trigger the webhook set in -e/--ev."
    },
    {
        name: 'allow-session-data-wh',
        alias: 'x',
        default: false,
        type: Boolean,
        description: "By default, if you set -e flag, the session data is not transferred to the webhook as it is extremely sensitive data. In order to bypass this security measure, use this flag."
    },
    {
        name: 'key',
        alias: 'k',
        type: String,
        typeLabel: '{redBright {underline apikey}}',
        description: "Specify an api key to use as a check for all requests. If you add -k by itself, a key will be autogenerated for you."
    },
    {
        name: 'config',
        alias: 'c',
        type: String,
        typeLabel: '{yellowBright {underline ./config.json}}',
        description: "The relative json file that contains the config. By default the system will look for config.json which will override any config variables set. Default: './config.json'."
    },
    {
        name: 'session',
        alias: 's',
        type: String,
        typeLabel: '{magentaBright {underline BASE64}}',
        description: "A base64 string representing the session data."
    },
    {
        name: 'keep-alive',
        alias: 'a',
        type: Boolean,
        description: "If true, the system will force the session to refocus in this process. This will prevent you from opening a session elsewhere."
    },
    {
        name: 'use-session-id-in-path',
        alias: 'i',
        type: Boolean,
        description: "If true, all API paths will include the session id. default to false and the default session Id is 'session'."
    },
    {
        name: 'generate-api-docs',
        alias: 'd',
        type: Boolean,
        default: true,
        description: "Generate postman collection and expose api docs to open in browser."
    },
    {
        name: 'session-data-only',
        alias: 'o',
        type: Boolean,
        description: "Kill the process when the session data is saved.",
        default: false
    },
    {
        name: 'skip-save-postman-collection',
        type: Boolean,
        description: "Don't save the postman collection.",
        default: false
    },
    {
        name: 'headful',
        type: Boolean,
        description: "Show the browser window on your machine.",
        default: false
    },
    {
        name: 'headful',
        type: Boolean,
        description: "Pre authenticate documentation site [High security risk]."
    },
    {
        name: 'stats',
        type: Boolean,
        description: "Exposes API swagger-statistics.",
        default: false
    },
    {
        name: 'pre-auth-docs',
        type: Boolean,
        description: "Grab config options from the environment variables.",
        default: false
    },
    {
        name: 'no-kill-on-logout',
        type: Boolean,
        description: "Keeps the process alive when host account logs out of session. default is false",
        default: false
    },
    {
        name: 'debug',
        type: Boolean,
        description: "Print out the CLI flag values and the WA_* env vars. default is false",
        default: false
    },
    {
        name: 'cors',
        type: Boolean,
        description: "Enable all cors requests",
        default: false
    },
    {
        name: 'socket',
        type: Boolean,
        description: "Expose a socket.io middleware on the server.",
        default: false
    },
    {
        name: 'license-key',
        alias: 'l',
        type: String,
        typeLabel: '{yellowBright {underline B2BJ4JFB-2UN2J3ND-2J5I.....}}',
        description: "The license key you want to use for this server. License keys are used to unlock features. Learn more here https://github.com/open-wa/wa-automate-nodejs#license-key"
    },
    {
        name: 'ready-webhook',
        type: String,
        typeLabel: '{yellow {underline https://webhook.site/....}}',
        description: "Webhook that fires when the EASY API is completely ready"
    },
    {
        name: 'on-call',
        type: String,
        typeLabel: '{yellow {underline "Please do not call this number"}}',
        description: "A default message to send to any number that is trying to call the host account"
    },
    {
        name: 'auto-reject',
        type: Boolean,
        description: "Automatically reject incoming phone and video calls to the host account."
    },
    {
        name: 'emit-unread',
        type: Boolean,
        description: "Emit all unread messages via onMessage webhooks on launch.",
        default: false
    },
    {
        name: 'skip-url-check',
        type: Boolean,
        description: "Don't validate webhook URLs. Enables use of non-FQDNs."
    },
    {
        name: 'tunnel',
        type: Boolean,
        description: "Expose a tunnel to your EASY API session - this is for testing and it is unsecured."
    },
    {
        name: 'help',
        description: 'Print this usage guide.'
    }
];
exports.optionKeys = optionList.map(({ name }) => (0, tools_1.camelize)(name));
exports.optionKeysWithDefalts = [...optionList.filter(o => o.hasOwnProperty('default')).map(({ name }) => (0, tools_1.camelize)(name)), 'popup'];
exports.PrimitiveConverter = {
    Number: 1,
    Boolean: true,
    String: "hello"
};
exports.cliOptionNames = optionList.reduce((acc, c) => {
    if (!c.type)
        return acc;
    acc[(0, tools_1.camelize)(c.name)] = typeof exports.PrimitiveConverter[c.type.name];
    return acc;
}, {});
const meowFlags = () => {
    const extraFlags = {};
    configWithCases.map(({ type, key }) => {
        if (key === "popup")
            type = "number";
        if (key === "viewport")
            type = "string";
        if (key === "stickerServerEndpoint")
            type = "string";
        extraFlags[key] = {
            type
        };
    });
    const res = {};
    optionList.map(option => {
        var _a, _b;
        res[(0, tools_1.camelize)(option.name)] = Object.assign(Object.assign({}, option), { 
            //@ts-ignore
            type: (_b = (_a = option.type) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toLowerCase() });
    });
    return Object.assign(Object.assign({}, res), extraFlags);
};
exports.meowFlags = meowFlags;
exports.helptext = (0, command_line_usage_1.default)([{
        content: logo_1.HELP_HEADER,
        raw: true,
    },
    {
        header: '',
        optionList
    },
    {
        header: "Session config flags",
        optionList: [
            ...configWithCases.map(c => {
                let type;
                if (c.type === 'boolean')
                    type = Boolean;
                if (c.type === 'string')
                    type = String;
                if (c.type === '"number"' || c.type === 'number')
                    type = Number;
                return {
                    name: c.p,
                    type,
                    description: c.description
                };
            })
        ]
    },
    {
        content: `Please check here for more information on some of the above mentioned parameters: {underline https://docs.openwa.dev/interfaces/api_model_config.configobject}`
    },
    {
        content: 'Project home: {underline https://github.com/open-wa/wa-automate-nodejs}'
    }
]);
const envArgs = () => {
    const env = {};
    Object.entries(process.env).filter(([k,]) => k.includes('WA')).map(([k, v]) => env[changeCase.camelCase(k.replace('WA_', ''))] = (v == 'false' || v == 'FALSE') ? false : (v == 'true' || v == 'TRUE') ? true : Number(v) || v);
    return env;
};
exports.envArgs = envArgs;
const configFile = (config) => {
    let confFile = {};
    const conf = config || process.env.WA_CLI_CONFIG;
    if (conf) {
        if ((0, tools_1.isBase64)(conf)) {
            confFile = JSON.parse(Buffer.from(conf, 'base64').toString('ascii'));
        }
        else {
            confFile = (0, file_utils_1.tryOpenFileAsObject)(conf || `cli.config.json`);
            if (!confFile)
                console.error(`Unable to read config file json: ${conf}`);
        }
    }
    else {
        confFile = (0, file_utils_1.tryOpenFileAsObject)(`cli.config.json`);
    }
    return confFile;
};
exports.configFile = configFile;
const cli = () => {
    const _cli = (0, meow_1.default)(exports.helptext, {
        flags: Object.assign(Object.assign({}, (0, exports.meowFlags)()), { popup: {
                type: 'boolean',
                default: false
            } }),
        booleanDefault: undefined
    });
    /**
     * Config order should follow airmanship rules. Least maneuverable to most maneuverable.
     *
     * 1. ENV VARS
     * 2. Config file
     * 3. CLI flags
     */
    const nonCliConfigs = Object.assign(Object.assign({}, (0, exports.envArgs)()), ((0, exports.configFile)(_cli.flags.config) || {}));
    optionList.filter(option => option.default);
    const cliConfig = Object.assign(Object.assign(Object.assign({ sessionId: "session" }, nonCliConfigs), _cli.flags), exports.optionKeysWithDefalts.reduce((p, c) => nonCliConfigs.hasOwnProperty(c) ? Object.assign(Object.assign({}, p), { [c]: nonCliConfigs[c] }) : p, {}));
    //firstly set up logger
    if (cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.logging) {
        if (Array.isArray(cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.logging))
            cliConfig.logging = (0, logging_1.setupLogging)(cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.logging, `easy-api-${(cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.sessionId) || 'session'}`);
    }
    const PORT = Number(cliConfig.port || process.env.PORT || 8080);
    const spinner = new events_1.Spin(cliConfig.sessionId, 'STARTUP', cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.disableSpins);
    const createConfig = Object.assign({}, cliConfig);
    if (cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.session) {
        createConfig.sessionData = cliConfig.session;
    }
    if (cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.allowSessionDataWh) {
        cliConfig.allowSessionDataWebhook = cliConfig.allowSessionDataWh;
    }
    /**
     * Build create() specific conig
     */
    if (((cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.licenseKey) || (cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.l))) {
        createConfig.licenseKey = cliConfig.licenseKey || cliConfig.l;
    }
    if (cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.popup) {
        createConfig.popup = PORT;
    }
    if (!((cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.key) == null) && (cliConfig === null || cliConfig === void 0 ? void 0 : cliConfig.key) == "") {
        cliConfig.key = uuid_apikey_1.default.create().apiKey;
    }
    if (cliConfig.viewport && cliConfig.viewport.split && cliConfig.viewport.split('x').length && cliConfig.viewport.split('x').length == 2 && cliConfig.viewport.split('x').map(Number).map(n => !!n ? n : null).filter(n => n).length == 2) {
        const [width, height] = cliConfig.viewport.split('x').map(Number).map(n => !!n ? n : null).filter(n => n);
        createConfig.viewport = { width, height };
    }
    if (cliConfig.resizable) {
        createConfig.defaultViewport = null; // <= set this to have viewport emulation off
    }
    if (cliConfig.sessionDataOnly) {
        events_1.ev.on(`sessionData.**`, (sessionData, sessionId) => __awaiter(void 0, void 0, void 0, function* () {
            (0, fs_extra_1.writeFile)(`${sessionId}.data.json`, JSON.stringify(sessionData), (err) => {
                if (err) {
                    spinner.fail(err.message);
                    return;
                }
                else
                    spinner.succeed(`Session data saved: ${sessionId}.data.json\nClosing.`);
                process.exit();
            });
        }));
    }
    if (cliConfig.skipUrlCheck)
        checkUrl = () => true;
    if (cliConfig.webhook || cliConfig.webhook == '') {
        if (checkUrl(cliConfig.webhook) || Array.isArray(cliConfig.webhook)) {
            spinner.succeed('webhooks set already');
        }
        else {
            if (cliConfig.webhook == '')
                cliConfig.webhook = 'webhooks.json';
            cliConfig.webhook = (0, file_utils_1.tryOpenFileAsObject)(cliConfig.webhook, true);
            if (!checkUrl(cliConfig.webhook)) {
                cliConfig.webhook = undefined;
            }
        }
    }
    if (cliConfig.twilioWebhook || cliConfig.twilioWebhook == '') {
        if (cliConfig.twilioWebhook == '' && cliConfig.webhook)
            cliConfig.twilioWebhook = cliConfig.webhook;
        if (!checkUrl(cliConfig.twilioWebhook)) {
            cliConfig.twilioWebhook = undefined;
        }
        if (cliConfig.twilioWebhook && (!createConfig.cloudUploadOptions || createConfig.messagePreprocessor !== 'UPLOAD_CLOUD')) {
            spinner.info('twilioWebhook set but messagePreprocessor not set to UPLOAD_CLOUD or cloudUploadOptions is missing');
        }
    }
    if (cliConfig.apiHost) {
        cliConfig.apiHost = cliConfig.apiHost.replace(/\/$/, '');
    }
    if (cliConfig.debug) {
        spinner.succeed(`DEBUG - flags: ${JSON.stringify(cliConfig)}`);
        const WA_ENV = {};
        Object.keys(process.env).map(k => {
            if (k.startsWith('WA_'))
                WA_ENV[k] = process.env[k];
        });
        spinner.succeed(`DEBUG - env vars: ${JSON.stringify(WA_ENV)}`);
    }
    return {
        createConfig, cliConfig, PORT, spinner
    };
};
exports.cli = cli;
