"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortTypeAnalysisFastResult = exports.sortTypeAnalysisFullResult = exports.getJsonSchemaGraph = exports.analyzeTypesFast = exports.analyzeTypes = void 0;
const traverse = require("json-schema-traverse");
const graph_cycles_1 = require("graph-cycles");
function decodeRef(ref) {
    if (ref == null)
        return undefined;
    if (ref.startsWith("#/definitions/"))
        return ref.slice(14);
    return undefined;
}
function analyzeTypes(schema) {
    const graph = getJsonSchemaGraph(schema);
    return { ...graph_cycles_1.analyzeGraph(graph), graph };
}
exports.analyzeTypes = analyzeTypes;
function analyzeTypesFast(schema) {
    const graph = getJsonSchemaGraph(schema);
    return { ...graph_cycles_1.analyzeGraphFast(graph), graph };
}
exports.analyzeTypesFast = analyzeTypesFast;
function getJsonSchemaGraph(schema) {
    var _a;
    return Object
        .keys((_a = schema.definitions) !== null && _a !== void 0 ? _a : {})
        .map((type) => {
        const subSchema = schema.definitions[type];
        const dependencies = new Set();
        traverse(subSchema, (schema) => {
            const ref = decodeRef(schema.$ref);
            if (ref)
                dependencies.add(ref);
        });
        return [type, [...dependencies]];
    });
}
exports.getJsonSchemaGraph = getJsonSchemaGraph;
function sortGraph(result) {
    const { graph } = result;
    return [...graph]
        .sort((a, b) => a[0].localeCompare(b[0]))
        .map(([from, to]) => [from, [...to].sort()]);
}
function sortTypeAnalysisFullResult(result) {
    return {
        ...graph_cycles_1.sortFullAnalysisResult(result),
        graph: sortGraph(result),
    };
}
exports.sortTypeAnalysisFullResult = sortTypeAnalysisFullResult;
function sortTypeAnalysisFastResult(result) {
    return {
        ...graph_cycles_1.sortFastAnalysisResult(result),
        graph: sortGraph(result),
    };
}
exports.sortTypeAnalysisFastResult = sortTypeAnalysisFastResult;
